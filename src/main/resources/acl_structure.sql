CREATE TABLE ACL_CLASS (
    id BIGSERIAL NOT NULL PRIMARY KEY,
    class VARCHAR NOT NULL,
    CONSTRAINT UNIQUE_UK_2 UNIQUE(class)
);

CREATE TABLE ACL_ENTRY(
    id BIGSERIAL NOT NULL PRIMARY KEY,
    acl_object_identity BIGINT NOT NULL,
    sid BIGINT NOT NULL,
    mask INTEGER NOT NULL,
    ace_order INT NOT NULL,
    granting BOOLEAN NOT NULL,
    audit_success BOOLEAN NOT NULL,
    audit_failure BOOLEAN NOT NULL,
    CONSTRAINT UNIQUE_UK_4 UNIQUE(acl_object_identity,ace_order), CONSTRAINT FOREIGN_FK_4 FOREIGN KEY(acl_object_identity) REFERENCES ACL_OBJECT_IDENTITY(id), CONSTRAINT FOREIGN_FK_5 FOREIGN KEY(sid) REFERENCES ACL_SID(id)
);


CREATE TABLE ACL_OBJECT_IDENTITY (
    id BIGSERIAL NOT NULL PRIMARY KEY,
    object_id_class BIGINT NOT NULL,
    object_id_identity BIGINT NOT NULL,
    owner_sid BIGINT,
    parent_object BIGINT,
    entries_inheriting BOOLEAN NOT NULL,
    CONSTRAINT UNIQUE_UK_3 UNIQUE(object_id_class,object_id_identity), CONSTRAINT FOREIGN_FK_1 FOREIGN KEY(parent_object) REFERENCES ACL_OBJECT_IDENTITY(id), CONSTRAINT FOREIGN_FK_2 FOREIGN KEY(object_id_class) REFERENCES ACL_CLASS(id), CONSTRAINT FOREIGN_FK_3 FOREIGN KEY(owner_sid) REFERENCES ACL_SID(id)
);


CREATE TABLE ACL_SID (
    id BIGSERIAL NOT NULL PRIMARY KEY,
    principal BOOLEAN NOT NULL,
    sid VARCHAR(100) NOT NULL,
    CONSTRAINT UNIQUE_UK_1 UNIQUE(sid,principal)
);


ALTER TABLE acl_object_identity ADD CONSTRAINT foreign_fk_2
FOREIGN KEY (object_id_class)
REFERENCES acl_class (id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
--NOT DEFERRABLE;

ALTER TABLE acl_entry ADD CONSTRAINT foreign_fk_4
FOREIGN KEY (acl_object_identity)
REFERENCES acl_object_identity (id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
--NOT DEFERRABLE;

ALTER TABLE acl_entry ADD CONSTRAINT foreign_fk_5
FOREIGN KEY (sid)
REFERENCES acl_sid (id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
--NOT DEFERRABLE;

ALTER TABLE acl_object_identity ADD CONSTRAINT foreign_fk_3
FOREIGN KEY (owner_sid)
REFERENCES acl_sid (id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
--NOT DEFERRABLE;
